"use client";

import { usePathname, useRouter } from "next/navigation";
import Link from "next/link";
import React, { useEffect, useRef, useState } from "react";
import { FiSettings } from "react-icons/fi";
import { FaBell, FaCheckCircle, FaUser } from "react-icons/fa";
import { RiBillLine } from "react-icons/ri";
import { LuPanelLeftClose } from "react-icons/lu";
import { useData } from "../context/Context";
import { GoHome } from "react-icons/go";
import { MdOutlineAssignment } from "react-icons/md";
import { CgDetailsMore } from "react-icons/cg";
import { MdOutlineSchedule } from "react-icons/md";
import { BsInfoSquare } from "react-icons/bs";
import { IoMdNotificationsOutline } from "react-icons/io";
import LoadingPage from "@/components/PageLoading";
import { FaRegUser } from "react-icons/fa";

// export const metadata = {
//   title: "Konsolenttorget Register",
//   description: "Generated by create next app",
// };

export default function DashboardLayout({ children, params }) {
  const { userData, setUserData } = useData();
  const [sideBarOpen, setSideBarOpen] = useState(true);
  const currentPath = usePathname();
  const { id } = React.use(params);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // window.scrollTo(0, 0);
    setIsLoading(false);
  }, []);

  const router = useRouter();

  const optionRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (optionRef.current && !optionRef.current.contains(event.target)) {
        if (window.innerWidth < 768) {
          setSideBarOpen(false);
        }
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  //   useEffect(() => {
  //     const checkAuth = async () => {
  //       const tkn = localStorage.getItem("token");

  //       if (!tkn) {
  //         localStorage.removeItem("userData");
  //         router.push("/loggin");
  //         return;
  //       }

  //       try {
  //         const decodeToken = jwtDecode(tkn);

  //         if (tkn && userData?.email && decodeToken.email !== userData?.email) {
  //           sessionStorage.removeItem("userData");
  //           router.push("/loggin");
  //         }
  //         // setToken(tkn)
  //       } catch (error) {
  //         console.error("Error decoding token:", error);
  //         router.push("/loggin");
  //       } finally {
  //         setIsLoading(false);
  //       }
  //     };

  //     checkAuth();
  //   }, [router, userData]);

  const [expandedItem, setExpandedItem] = useState(null);

  const toggleSubMenu = (index) => {
    setExpandedItem(expandedItem === index ? null : index);
  };

  const items = [
    {
      title: "Home",
      icon: <GoHome className=" text-[1.3rem] " />,
      pathName: `/dashboard`,
    },
    {
      title: "Assigned Bus",
      icon: <MdOutlineAssignment className=" text-[1.3rem] " />,
      pathName: `/dashboard/assigned-bus`,
    },
    {
      title: "Bus Details",
      icon: <CgDetailsMore className=" text-[1.3rem] " />,
      pathName: `/dashboard/bus-details`,
    },
    {
      title: "Schedule",
      icon: <MdOutlineSchedule className=" text-[1.3rem] " />,
      pathName: `/dashboard/schedule`,
    },
    {
      title: "Driver Info",
      icon: <BsInfoSquare className=" text-[1.1rem] " />,
      pathName: `/dashboard/driver-info`,
    },
    {
      title: "Helper Info",
      icon: <BsInfoSquare className=" text-[1.1rem] " />,
      pathName: `/dashboard/helper-info`,
    },
    {
      title: "Trip Info",
      icon: <BsInfoSquare className=" text-[1.1rem] " />,
      pathName: `/dashboard/trip-info`,
    },
    {
      title: "Notification",
      icon: <IoMdNotificationsOutline className=" text-[1.4rem] " />,
      pathName: `/dashboard/notification`,
    },
  ];

  if (isLoading) {
    return <LoadingPage />;
  }

  return (
    <div className=" font-Georama max-h-[100vh] overflow-x-hidden ">
      <div className="">
        <div className=" relative flex rounded-md min-h-[100vh] overflow-hidden">
          <div
            ref={optionRef}
            className={` ${
              sideBarOpen
                ? "inboxSideBarOpen w-[20rem] "
                : "inboxSideBarClose w-[3.5rem] "
            } bg-[#2C2C2C] z-50 md:relative absolute md:h-auto h-full transition-all duration-300 ease-linear flex flex-col justify-between gap-2  px-1 md:px-3 py-5 overflow-y-auto `}
          >
            <div>
              <div className=" h-[5rem] ">
                {sideBarOpen && (
                  <h3 className=" text-[#fff] text-[2rem] font-semibold text-center   ">
                    IIUC TRANSPORT
                  </h3>
                )}
              </div>
              <div className={` flex flex-col gap-1 mt-10 `}>
                {items.map((item, idx) => (
                  <div key={idx}>
                    <Link href={`${item.pathName}`}>
                      <div
                        onClick={() => {
                          if (window.innerWidth < 768) {
                            setSideBarOpen(false);
                          }
                        }}
                        className={`cursor-pointer ${
                          currentPath === item.pathName
                            ? "bg-green-50  text-[#00712D] "
                            : "text-[#fff]"
                        } group flex items-center gap-4 text-[1.1rem] hover:bg-green-50 rounded-md hover:text-[#00712D] px-3 ${
                          sideBarOpen ? "" : "justify-center"
                        }  py-2   transition-all duration-300 ease-in-out font-medium  `}
                      >
                        <div
                          className={`${
                            currentPath === item.pathName
                              ? "text-[#00712D]"
                              : "text-white"
                          } group-hover:text-[#00712D] transition-all duration-300 ease-linear`}
                        >
                          {item.icon}
                        </div>
                        <span
                          className={` ${
                            sideBarOpen ? "" : "hidden"
                          }  group-hover:text-[#00712D]`}
                        >
                          {item.title}
                        </span>
                      </div>
                    </Link>
                  </div>
                ))}
              </div>
            </div>
            <div
              className={` flex ${
                sideBarOpen ? "justify-end" : "justify-center"
              } `}
            >
              <div
                onClick={() => setSideBarOpen(!sideBarOpen)}
                className={` w-fit p-2 bg-white cursor-pointer rounded-full `}
              >
                <LuPanelLeftClose
                  className={` ${
                    sideBarOpen ? "" : "rotate-180"
                  } text-[1.5rem] text-[#00712D] `}
                />
              </div>
            </div>
          </div>

          <div className="flex-1 md:ml-0 ml-[3rem] w-full ">
            <div className=" flex items-center justify-between w-full px-5 h-[4.5rem] bg-[#2C2C2C]  ">
              <h3 className=" text-[2rem] font-medium text-white ">
                Dashboard
              </h3>
              <div className=" border-2 p-2 rounded-full border-gray-500 text-gray-300  ">
                <FaRegUser className=" text-[1.2rem] " />
              </div>
            </div>
            <div className=" h-[calc(100vh-4.5rem)] overflow-y-auto p-2 ">
              {children}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
